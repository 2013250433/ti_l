plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id "com.moowork.node" version "1.3.1"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

node {
	// Version of node to use.
	version = '10.16.2'

	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = false

	// Set the work directory for unpacking node
	workDir = file("${project.buildDir}/src/main/myfrontend/nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${project.buildDir}/src/main/myfrontend//npm")

	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}//src/main/myfrontend/")
}

task npmInstallDependencies(type: NpmTask){
	dependsOn 'npmSetup'
	execOverrides {
		it.ignoreExitValue = true
		it.workingDir = 'src/main/myfrontend'
	}
	args = ['install']
}

task npmBuild(type: NpmTask){
	dependsOn 'npmInstallDependencies'
	execOverrides {
		it.workingDir = 'src/main/myfrontend'
	}
	args = ['run', 'build']
}

task copyFrontendToBuild(type: Copy){
	dependsOn 'npmBuild'
	from "$projectDir/src/main/myfrontend/build/"
	into "$buildDir/resources/main/static"
}

processResources {
	dependsOn 'copyFrontendToBuild'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	runtimeOnly 'com.h2database:h2'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}